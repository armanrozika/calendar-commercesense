{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","isCompareDate","setIsCompareDate","startDate","setStartDate","endDate","setEndDate","focusedInput","setFocusedInput","isPick","setIsPick","startDateC","setStartDateC","endDateC","setEndDateC","focusedInputC","setFocusedInputC","className","onClick","style","background","display","border","moment","format","subtract","startOf","endOf","left","numberOfMonths","onDatesChange","minimumNights","onFocusChange","focuInput","hideKeyboardShortcutsPanel","initialVisibleMonth","add","isDayHighlighted","date","hh","noBorder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5022ec4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from 'moment';\nimport { DayPickerRangeController } from 'react-dates';\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nimport './App.scss';\n\nfunction App() {\n  const [isCompareDate, setIsCompareDate] = useState(false);\n\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [focusedInput, setFocusedInput] = useState('startDate');\n  const [isPick, setIsPick] = useState(true);\n  //compare date value\n  const [startDateC, setStartDateC] = useState(null);\n  const [endDateC, setEndDateC] = useState(null);\n  const [focusedInputC, setFocusedInputC] = useState('startDate');\n\n  return (\n    <div className=\"calendar-parent\">\n      <div className=\"calendar-center\">\n        <h2>Date Picker</h2>\n        <div className=\"checkbox-wrapper\">\n          <div\n            onClick={() => {\n              setIsCompareDate(!isCompareDate);\n              if (isCompareDate) {\n                setIsPick(true);\n              } else {\n                setIsPick(false);\n              }\n            }}\n            className=\"checkbox\"\n            style={{ background: isCompareDate ? '#72c7b6' : 'none' }}\n          >\n            <div\n              style={{ display: isCompareDate ? 'block' : 'none' }}\n              className=\"tick\"\n            ></div>\n          </div>\n          <p>Compare dates</p>\n        </div>\n\n        <div className=\"date-input\">\n          <div className=\"date-selected\">\n            <p>Pick Date</p>\n            <div\n              className=\"date-text\"\n              style={{\n                border: isPick ? '2px solid #a7dcd2' : '1px solid #ebebeb',\n              }}\n              onClick={() => setIsPick(true)}\n            >\n              <div\n                style={{\n                  background: focusedInput === 'startDate' ? '#a7dcd2' : 'none',\n                }}\n                onClick={() => setFocusedInput('startDate')}\n              >\n                <p>Start</p>\n                <span>\n                  {startDate && moment(startDate).format('Do, MMM YYYY')}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  background: focusedInput === 'endDate' ? '#a7dcd2' : 'none',\n                }}\n                onClick={() => setFocusedInput('endDate')}\n              >\n                <p>End</p>\n\n                <span>{endDate && moment(endDate).format('Do, MMM YYYY')}</span>\n              </div>\n            </div>\n          </div>\n          {isCompareDate && (\n            <div className=\"date-selected\">\n              <p>Compare Dates</p>\n              <div\n                className=\"date-text\"\n                style={{\n                  border: !isPick ? '2px solid #fcbf49' : '1px solid #ebebeb',\n                }}\n                onClick={() => setIsPick(false)}\n              >\n                <div\n                  style={{\n                    background:\n                      focusedInputC === 'startDate' ? '#fcbf49' : 'none',\n                  }}\n                  onClick={() => setFocusedInputC('startDate')}\n                >\n                  <p>Start</p>\n                  <span>\n                    {startDateC && moment(startDateC).format('Do, MMM YYYY')}\n                  </span>\n                </div>\n                <div\n                  style={{\n                    background:\n                      focusedInputC === 'endDate' ? '#fcbf49' : 'none',\n                  }}\n                  onClick={() => setFocusedInputC('endDate')}\n                >\n                  <p>End</p>\n                  <span>\n                    {endDateC && moment(endDateC).format('Do, MMM YYYY')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"quick-selector\">\n          <div className=\"quick-top\">\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(moment().subtract(1, 'd'));\n                  setEndDateC(moment().subtract(1, 'd'));\n                } else {\n                  setStartDate(moment().subtract(1, 'd'));\n                  setEndDate(moment().subtract(1, 'd'));\n                }\n              }}\n            >\n              Latest Day\n            </div>\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(moment().startOf('isoWeek'));\n                  setEndDateC(moment());\n                } else {\n                  setStartDate(moment().startOf('isoWeek'));\n                  setEndDate(moment());\n                }\n              }}\n            >\n              Current Week\n            </div>\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(moment().startOf('month'));\n                  setEndDateC(moment());\n                } else {\n                  setStartDate(moment().startOf('month'));\n                  setEndDate(moment());\n                }\n              }}\n            >\n              Current Month\n            </div>\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(moment().startOf('quarter'));\n                  setEndDateC(moment());\n                } else {\n                  setStartDate(moment().startOf('quarter'));\n                  setEndDate(moment());\n                }\n              }}\n            >\n              Current Quarter\n            </div>\n          </div>\n          <div className=\"quick-bottom\">\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(\n                    moment().subtract(1, 'week').startOf('isoWeek')\n                  );\n                  setEndDateC(moment().subtract(1, 'week').endOf('isoWeek'));\n                } else {\n                  setStartDate(moment().subtract(1, 'week').startOf('isoWeek'));\n                  setEndDate(moment().subtract(1, 'week').endOf('isoWeek'));\n                }\n              }}\n            >\n              Previous Week\n            </div>\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(moment().subtract(1, 'month').startOf('month'));\n                  setEndDateC(moment().subtract(1, 'month').endOf('month'));\n                } else {\n                  setStartDate(moment().subtract(1, 'month').startOf('month'));\n                  setEndDate(moment().subtract(1, 'month').endOf('month'));\n                }\n              }}\n            >\n              Previous Month\n            </div>\n            <div\n              onClick={() => {\n                if (!isPick) {\n                  setStartDateC(\n                    moment().subtract(1, 'quarter').startOf('quarter')\n                  );\n                  setEndDateC(moment().subtract(1, 'quarter').endOf('quarter'));\n                } else {\n                  setStartDate(\n                    moment().subtract(1, 'quarter').startOf('quarter')\n                  );\n                  setEndDate(moment().subtract(1, 'quarter').endOf('quarter'));\n                }\n              }}\n            >\n              Previous Quarter\n            </div>\n          </div>\n        </div>\n\n        <div className=\"calendar-wrapper\">\n          <div className=\"calendar\" style={{ left: isPick ? '24px' : '-100%' }}>\n            <DayPickerRangeController\n              startDate={startDate}\n              endDate={endDate}\n              numberOfMonths={2}\n              focusedInput={focusedInput}\n              onDatesChange={({ startDate, endDate }) => {\n                setStartDate(startDate);\n                setEndDate(endDate);\n              }}\n              minimumNights={0}\n              onFocusChange={(focuInput) => {\n                setFocusedInput(!focuInput ? 'startDate' : focuInput);\n              }}\n              hideKeyboardShortcutsPanel\n              initialVisibleMonth={() => moment().add(2, 'MM')}\n              isDayHighlighted={(date) => {\n                if (!isCompareDate) {\n                  return;\n                }\n                const hh = moment(startDateC).subtract(1, 'd');\n                return date <= endDateC && date > hh;\n              }}\n              noBorder\n            />\n          </div>\n\n          <div\n            className=\"calendar-compare\"\n            style={{ left: !isPick ? '24px' : '-100%' }}\n          >\n            <DayPickerRangeController\n              startDate={startDateC}\n              endDate={endDateC}\n              numberOfMonths={2}\n              focusedInput={focusedInputC}\n              onDatesChange={({ startDate, endDate }) => {\n                setStartDateC(startDate);\n                setEndDateC(endDate);\n              }}\n              minimumNights={0}\n              onFocusChange={(focuInput) => {\n                setFocusedInputC(!focuInput ? 'startDate' : focuInput);\n              }}\n              hideKeyboardShortcutsPanel\n              initialVisibleMonth={() => moment().add(2, 'MM')}\n              isDayHighlighted={(date) => {\n                const hh = moment(startDate).subtract(1, 'd');\n                return date <= endDate && date > hh;\n              }}\n              noBorder\n            />\n          </div>\n        </div>\n        <div className=\"btn-apply\">\n          <button>Cancel</button>\n          <button>Apply</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}